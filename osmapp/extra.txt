'''
	root			 =   etree.parse(data)
	node_ids         =   list(map(int,(root.xpath('/osm/node/@id'))))
	node_timestamps  =   list(map(str,(root.xpath('/osm/node/@timestamp'))))
	node_uids        =   list(map(int,(root.xpath('/osm/node/@uid'))))
	node_users       =   list(map(str,(root.xpath('/osm/node/@user'))))
	node_versions    =   list(map(int,(root.xpath('/osm/node/@version'))))
	node_changesets  =   list(map(int,(root.xpath('/osm/node/@changeset'))))
	node_lats        =   list(map(float,(root.xpath('/osm/node/@lat'))))
	node_lons        =   list(map(float,(root.xpath('/osm/node/@lon'))))

	number_of_nodes  =	len(node_ids)

	for i in range(0,number_of_nodes):
		node = Node(id=node_ids[i], timestamp=node_timestamps[i], uid=node_uids[i],
					user=node_users[i], version=node_versions[i],  visible=True, changeset=node_changesets[i],
					incomplete=False
					)
		node.set_cordinates(node_lats[i],node_lons[i])
		node.save()

	
	for primitive in rootel.getchildren():
		if primitive.tag == "node":
			#create tag
			snode_id   = int(primitive.get("id"))
			stimestamp = primitive.get("timestamp")
			suid       = int(primitive.get("uid"))
			suser      = primitive.get("user")
			sversion   = int(primitive.get("version"))
			schangeset = int(primitive.get("changeset"))
			slat       = float(primitive.get("lat"))
			slon       = float(primitive.get("lon"))

			node = Node(id=snode_id, timestamp=stimestamp,uid=suid,user=suser,version=sversion,visible=True,changeset=schangeset,incomplete=False)
			node.set_cordinates(slat,slon)
			node.save()

			for xmlTag in primitive.getchildren():
				getkey_fromxml = xmlTag.get("k")
				getvalue_fromxml = xmlTag.get("v")

				tag = Tag()
				tag = tag.add_tag(getkey_fromxml,getvalue_fromxml)
				node.tags.add(tag)

		elif primitive.tag == "way":
			wway_id    = int(primitive.get("id"))
			wtimestamp = primitive.get("timestamp")
			wuid       = int(primitive.get("uid"))
			wuser      = primitive.get("user")
			wversion   = int(primitive.get("version"))
			wchangeset = int(primitive.get("changeset"))

			way = Way(id=wway_id,timestamp=wtimestamp,visible=True,incomplete=False,uid=wuid,user=wuser,version=wversion,changeset=wchangeset)
			way.save()
			way.wn_set.all().delete()

			for xmlTag in primitive.getchildren():
				if xmlTag.tag == "nd":
					node_reference = int(xmlTag.get('ref'))
					try:
						node = Node.objects.get(id=node_reference)
						way.add_node(node)
					except Exception as e:
						print("Node does not exist creating dummy node")
						dummy_node = Node.objects.create(id=node_reference, visible=False, incomplete=True)
						dummy_node.set_cordinates(0,0)
						dummy_node.save()
						way.incomplete = 'True'
						way.save()
						way.add_node(node)

				elif xmlTag.tag == "tag":
					getkey_fromxml= xmlTag.get("k")
					getvalue_fromxml =xmlTag.get("v")

					tag = Tag()
					tag = tag.add_tag(getkey_fromxml,getvalue_fromxml)
					way.tags.add(tag)
		elif primitive.tag == "relation":
			rid        = int(primitive.get("id"))
			rtimestamp = primitive.get("timestamp")
			ruid       = int(primitive.get("uid"))
			ruser      = primitive.get("user")
			rversion   = int(primitive.get("version"))
			rchangeset = int(primitive.get("changeset"))

			relation = OSM_Relation(id=rid, timestamp=rtimestamp, uid=ruid, user=ruser, version=rversion, changeset=rchangeset,visible=True,incomplete=False)
			relation.save()
			relation.memberrelation_set.all().delete()

			for xmlTag in primitive.getchildren():

				if xmlTag.tag == 'tag':
					getkey_fromxml= xmlTag.get("k")
					getvalue_fromxml =xmlTag.get("v")

					tag = Tag()
					tag = tag.add_tag(getkey_fromxml, getvalue_fromxml)
					relation.tags.add(tag)

				elif xmlTag.tag == 'member':
					type = xmlTag.get("type")
					ref  = xmlTag.get("ref")
					role = xmlTag.get("role")

					try:
						if type == 'node':
							rel_node = Node.objects.get(id=ref)
							rm = relation.add_member(rel_node,type ,role)
						elif type == 'way':
							rel_way = Way.objects.get(id=ref)
							rm = relation.add_member(rel_way,type, role)
						elif type == 'relation':
							rel_child_relation = OSM_Relation.objects.get(id=ref)
							rm = relation.add_member(rel_child_relation,type, role)

					except Exception as e:
						if type == 'node':
							dummy_rel_node = Node.objects.create(id=ref, visible=False, incomplete=True)
							dummy_rel_node.set_cordinates(0,0)
							dummy_rel_node.save()

							rm = relation.add_member(dummy_rel_node, type, role)
						
						elif type == 'way':
							dummy_rel_way = Way.objects.create(id=ref, visible=False, incomplete=True)
							dummy_rel_way.save()

							rm = relation.add_member(dummy_rel_way, type ,role)

						elif type == 'relation':
							dummy_rel_relation = OSM_Relation.objects.create(id= ref, visible=False, incomplete=True)
							dummy_rel_relation.save()

							rm = relation.add_member(dummy_rel_relation, type, role)


	return render(request,'gs/load.html')'''

    def to_xml(self, version_inc, outputparams=None):

        if outputparams is None:
            _outputparams = {'newline': '\n', 'indent': ' '}
        else:
            _outputparams = outputparams

        self.xml = '{newline}<node action="modify" '.format(**_outputparams)
        print("Version bool in node to xml {}".format(version_inc))
        for attr, value in self.__dict__.items():
            if attr == '_state':
                continue
            elif attr == 'feed_id':
                continue
            elif attr == 'purpose':
                continue
            elif attr == 'version':
                version_num = int(value)
                print("Version at first {}".format(version_num))
                if version_inc:
                    version_num = version_num + 1
                    print("Version at first {}".format(version_num))
                self.xml += "{}='{}' ".format(attr, version_num)
            elif attr == 'xml':
                continue
            elif attr == 'timestamp':
                ts_main = str(value).split('+')
                ts_value = ts_main[0].replace(' ', 'T') + 'Z'
                self.xml += "{}='{}' ".format(attr, ts_value, **_outputparams)
            elif attr == 'geom':
                lon = str(value[0])
                self.xml += "{}='{}' ".format('lon', lon)
                lat = str(value[1])
                self.xml += "{}='{}' ".format('lat', lat)
            else:
                self.xml += "{}='{}' ".format(attr, str(value), **_outputparams)

        self.xml += '>'

        tags = self.tags.all()

        for tag in tags:
            self.xml += tag.to_xml(_outputparams)

        self.xml += '{newline}</node>'.format(**_outputparams)
        return self.xml